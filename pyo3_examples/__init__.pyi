# copied from pybind11-integration and manually edited

import typing

__all__ = [
    "Collatz",
    "FibGenerator",
    "ManagedThing",
    "PrimeGenerator",
    "PrimeRange",
    "PrimeSieve",
    "Registry",
    "average_exectime",
    "exectime",
    "fib_recursive",
    "is_prime",
    "nth_prime",
    "prime_factors",
    "primes",
]

class Collatz:
    def __init__(self, n: int) -> None: ...
    def __iter__(self) -> Collatz: ...
    def __next__(self) -> int: ...
    def close(self) -> None: ...
    @typing.overload
    def send(self) -> int: ...
    @typing.overload
    def send(self, arg0: int) -> int: ...
    @typing.overload
    def throw(self) -> None: ...
    @typing.overload
    def throw(self, type: type, value: str = "", traceback: object = None) -> None: ...

class FibGenerator:
    def __init__(self) -> None: ...
    def __iter__(self) -> FibGenerator: ...
    def __next__(self) -> int: ...

class ManagedThing:
    def __call__(self) -> int: ...
    def __enter__(self) -> object: ...
    def __exit__(
        self,
        exc_type: object,
        value: object = "",
        traceback: object = None,
    ) -> None: ...
    def __init__(self, param1: int, param2: int) -> None: ...

class PrimeGenerator:
    def __init__(self) -> None: ...
    def __iter__(self) -> PrimeGenerator: ...
    def __next__(self) -> int: ...

class PrimeRange:
    def __init__(self, start: int, length: int) -> None: ...
    def __iter__(self) -> PrimeRange: ...
    def __next__(self) -> int: ...

class PrimeSieve:
    def __init__(self, n: int) -> None: ...
    def __iter__(self) -> PrimeSieve: ...
    def __next__(self) -> int: ...

class Registry:
    list: dict[type, dict[str, typing.Any]]
    """
    rust implementation base class that accepts __init_subclass__ calls.
    """
    def __init__(self) -> None: ...
    @classmethod
    def __init_subclass__(cls, **kwargs: typing.Any) -> None: ...

def average_exectime(
    *,
    n: int,
) -> typing.Callable[
    ...,
    typing.Callable[..., tuple[dict[str, float], typing.Any | None]],
]: ...
def exectime(
    arg0: typing.Callable,
) -> typing.Callable[..., tuple[dict[str, float], typing.Any | None]]: ...
def fib_recursive(n: int) -> int: ...
def is_prime(n: int) -> bool: ...
def nth_prime(n: int) -> int: ...
def prime_factors(n: int) -> list[int]: ...
def primes(cls: type) -> typing.Generator[int, None, None]: ...
